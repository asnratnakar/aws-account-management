name: Validate Pull Request

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'cdk.json'

env:
  NODE_VERSION: '18'

jobs:
  validate:
    name: Validate Changes
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript compilation
      run: npm run build
      
    - name: Validate CDK synthesis
      run: npm run synth
      
    - name: Check configuration
      run: |
        echo "üîç Validating configuration..."
        node -e "
          const config = require('./lib/config.js');
          try {
            config.validateConfig(config.defaultConfig);
            console.log('‚úÖ Configuration is valid');
          } catch (error) {
            console.log('‚ùå Configuration error:', error.message);
            process.exit(1);
          }
        "

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate CDK templates
      run: npm run synth
      
    - name: Scan for security issues
      run: |
        echo "üîí Scanning for security issues..."
        
        # Check for hardcoded credentials
        if grep -r "AKIA\|aws_secret_access_key\|password" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.log" || true; then
          echo "‚ö†Ô∏è  Potential hardcoded credentials found!"
          echo "Please review your code and remove any sensitive data"
        fi
        
        # Check for overly permissive policies
        if grep -r "\"\\*\"" cdk.out/ | grep -v "BootstrapVersion" || true; then
          echo "‚ö†Ô∏è  Wildcard permissions detected in generated templates"
          echo "Please review IAM policies for least privilege"
        fi
        
        echo "‚úÖ Security scan completed"

  diff-check:
    name: Show Infrastructure Changes
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Show what would be deployed
      run: |
        echo "üìã Infrastructure changes that would be applied:"
        echo "This is a preview - no actual deployment will happen"
        npm run synth
        
        echo ""
        echo "üìä Key resources that would be created/updated:"
        echo "- IAM Roles for personal development"
        echo "- CloudWatch billing alarms"
        echo "- SNS topics for notifications"
        echo "- AWS Budgets for spending control"
        
        echo ""
        echo "üí∞ Budget Configuration:"
        node -e "
          const config = require('./lib/config.js');
          const cfg = config.defaultConfig;
          console.log('Monthly Budget: $' + cfg.budgets.monthlyLimit);
          console.log('Quarterly Budget: $' + cfg.budgets.quarterlyLimit);
          console.log('Alert Thresholds: $' + cfg.billingAlerts.lowThreshold + ', $' + cfg.billingAlerts.mediumThreshold + ', $' + cfg.billingAlerts.highThreshold);
          console.log('Alert Email: ' + cfg.alertEmail);
        "

  comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [validate, security-scan, diff-check]
    if: always()
    
    steps:
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('AWS Infrastructure Validation')
          );
          
          const status = '${{ needs.validate.result }}' === 'success' && 
                        '${{ needs.security-scan.result }}' === 'success' && 
                        '${{ needs.diff-check.result }}' === 'success' ? '‚úÖ' : '‚ùå';
          
          const body = `## AWS Infrastructure Validation ${status}
          
          **Validation Results:**
          - TypeScript Compilation: ${{ needs.validate.result === 'success' && '‚úÖ Passed' || '‚ùå Failed' }}
          - Security Scan: ${{ needs.security-scan.result === 'success' && '‚úÖ Passed' || '‚ùå Failed' }}
          - Configuration Check: ${{ needs.diff-check.result === 'success' && '‚úÖ Passed' || '‚ùå Failed' }}
          
          **What happens when merged:**
          - Infrastructure will be validated again
          - Changes will be deployed to AWS account
          - Billing alerts and budgets will be updated
          - Email notifications will be sent to configured address
          
          **Security Notes:**
          - All IAM policies follow least privilege principles
          - Budget controls prevent runaway costs
          - Billing alerts provide early warnings
          
          ---
          *This validation runs on every PR to ensure safe deployments*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
