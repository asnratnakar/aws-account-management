name: Deploy AWS Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'tsconfig.json'
      - 'cdk.json'
  workflow_dispatch: # Allow manual triggering

env:
  AWS_DEFAULT_REGION: us-east-1
  CDK_DEFAULT_REGION: us-east-1
  NODE_VERSION: '18'

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required to checkout code

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate TypeScript compilation
      run: npm run build
      
    - name: Validate CDK synthesis
      run: npm run synth
      
    - name: Upload CDK templates as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cdk-templates
        path: cdk.out/
        retention-days: 30

  security-check:
    name: Security & Cost Analysis
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download CDK templates
      uses: actions/download-artifact@v4
      with:
        name: cdk-templates
        path: cdk.out/
        
    - name: Check for sensitive data
      run: |
        echo "üîç Checking for potential secrets..."
        # Check for hardcoded secrets (basic check)
        if grep -r "AKIA\|aws_secret_access_key\|password" cdk.out/ --exclude-dir=node_modules || true; then
          echo "‚ö†Ô∏è  Potential secrets found in templates!"
          exit 1
        else
          echo "‚úÖ No obvious secrets found"
        fi
        
    - name: Estimate costs (basic check)
      run: |
        echo "üí∞ Performing basic cost analysis..."
        # Check for expensive resources
        if grep -i "xlarge\|xxlarge\|metal" cdk.out/ || true; then
          echo "‚ö†Ô∏è  Large instance types detected!"
        fi
        echo "‚úÖ Cost analysis completed"

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [validate, security-check]
    if: github.ref == 'refs/heads/main'
    environment: production # This adds manual approval requirement
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GitHubActions-Deploy
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
        
    - name: Verify AWS credentials
      run: |
        echo "üîê Verifying AWS credentials..."
        aws sts get-caller-identity
        
    - name: Bootstrap CDK (if needed)
      run: |
        echo "ü•æ Checking CDK bootstrap status..."
        npx cdk bootstrap --require-approval never || echo "Bootstrap may already exist"
        
    - name: Show deployment diff
      run: |
        echo "üìã Showing changes to be deployed..."
        npm run diff || echo "No differences or first deployment"
        
    - name: Deploy infrastructure
      run: |
        echo "üöÄ Deploying AWS infrastructure..."
        npm run deploy
        
    - name: Deployment summary
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üìä Stack outputs:"
        aws cloudformation describe-stacks \
          --stack-name PersonalAwsManagementStack \
          --query 'Stacks[0].Outputs' \
          --output table || echo "No outputs available"

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Deployment Success Notification
      if: needs.deploy.result == 'success'
      run: |
        echo "‚úÖ AWS Infrastructure deployed successfully!"
        echo "üéØ Account: ${{ secrets.AWS_ACCOUNT_ID || 'Auto-detected' }}"
        echo "üåç Region: ${{ env.AWS_DEFAULT_REGION }}"
        echo "üìß Alerts will be sent to the configured email"
        
    - name: Deployment Failure Notification
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå AWS Infrastructure deployment failed!"
        echo "üîç Check the deployment logs above for details"
        echo "üõ†Ô∏è  You may need to fix configuration and retry"
